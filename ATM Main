package Money;

import java.text.DecimalFormat;
import java.util.*;

public class atmMachine {
	
	//Global variables
	//These variables can be called on at any point of the program 
	static double userBal; //Used to store the user's balance
	static double count = 0; //Used for a loop to continuously use the mainMenu method
	static DecimalFormat df = new DecimalFormat("####0.00");
	
	
	
	public static void main(String[] args) { //Entry point of program
		
		Scanner myObj = new Scanner(System.in); //Creates keyboard
		
		System.out.print("Enter UserName: ");
		
		final String userName = myObj.nextLine(); //Read user input and assign it to userName
		
		System.out.println("UserName is: " + userName.toUpperCase()); //Puts userName in upper case letters
		
		System.out.println(); //blank line
		
		System.out.println("Your current balance is: $0.00"); //Users start with zero balance
		
	do {
		mainMenu(userBal); //Calls the mainMenu method with the value of 0
		
	}
		while (count < 1);
			
			
		
	
				
		
		  
		 
	}
	
	//Main Menu Function/Method
	//Since the method is categorized as a double, it must return a double.
public static double mainMenu (double userBal) {
	
		 //find way to round userBal variable to nearest hundredth place
	
	
	//The following try block will ensure that the user inputs the correct format(number 1-4)
	//Try block will break the scope of a variable unless it is within the block itself, similar to an instance variable
		 try { 
		Scanner obj = new Scanner(System.in); 
		
		System.out.println();
		
		System.out.println("Which action would you like to perform today?");
		
		System.out.println("Deposit(press 1)/Withdraw(press 2)");
		
		System.out.println("Balance Inquiry(press 3)/Exit(press 4)");
			
		int userInput = obj.nextInt();
		
		if (userInput == 1) {
			
			 depositMethod(userBal);	
			
			 mainMenu(userBal);
			 
			 return userBal;
			 	
		}
		else if (userInput == 2) {
			
			withdrawMethod(userBal);
			
		}
		else if (userInput == 3){
			
			balanceInquiry(userBal); 
			
		}
		else if (userInput == 4){
			//returns user to the main code in order to end transaction
			
			
			//count= 5;
				
			System.out.println("Have a wonderful day "+ "!"); 
			
			//end of program, System.exit method force closes it
			System.exit(0);
			
		}
		else { // This will print if the user types an integer that is not 1-4.
			System.out.println("This number is invalid! Please try again!");
			mainMenu(userBal);
		}
	}
	
	catch (InputMismatchException e) { //This prints if the user types a character, string or symbol
		System.out.println("That is not a valid option. Please try again!");
		mainMenu(userBal);
		
	}
		
		return userBal; //The returned double


		
		
		 
}




private static double withdrawMethod(double userBal) {
	
	
	Scanner obj = new Scanner(System.in);

	System.out.println("Enter the amount that you would like to withdraw from your account today: ");
	
	double withAmt = obj.nextDouble();
	
	
	if (withAmt > userBal) {
		
		overdraftProtection(withAmt, userBal);
		
		return mainMenu(userBal);
		
		 }
	 
	
	else {
		
	userBal = userBal - withAmt;
		
	System.out.println("Your new balance is: $" + (df.format(userBal)));
	
	System.out.println("Would you like to make an additional transaction?");
	
	return mainMenu(userBal);
	}	
	}




public static double depositMethod (double userBal) {

System.out.println(" Enter the amount that you would like to deposit today: " );

  Scanner obj = new Scanner(System.in);
  
  double depAmt = obj.nextDouble();
  
  userBal = userBal + depAmt;
  
  System.out.println("Your new balance is: $" + (df.format(userBal)));
  
  System.out.println("Would you like to make an additional transaction?");
  
  //System.out.println(userBal); variable value check
  
  return mainMenu (userBal); 
}




public static double balanceInquiry(double userBal) {
	
	System.out.println("Here is your current balance: $" + (df.format(userBal)));
	
	System.out.println(); 
	
	System.out.println("Is there anything else I can help you with? ");
	
	return mainMenu(userBal);
	
}




public static double overdraftProtection (double withAmt, double userBal) {
	
	try {
	
	Scanner obj = new Scanner(System.in);
	
	System.out.println("Withdraw amount greater than balance!"); //Overdraft protection
	    
	System.out.println("Would you like to withdraw anyway for an additional $36 ? 1/Yes & 2/NO");
	
	//System.out.println(userBal); //test value check
	
	int overdraft = obj.nextInt(); 

		if (overdraft == 1) {
			
			userBal = (userBal - withAmt) - 36;
			
			System.out.println("Your new balance is: $" + (df.format(userBal)));
			
			return mainMenu(userBal);
		}
	    else {
	    	System.out.println("Would you like to make an additional transaction?");
	    	
	    	//System.out.println(userBal); //value check
	    	
	    	return mainMenu(userBal);
	    }
	}
		catch (Exception e) {
			
			System.out.println("That is not a valid option. Please try again!");
			
			overdraftProtection(withAmt, userBal);
			
	}
	 
 return mainMenu(userBal);
}

}
